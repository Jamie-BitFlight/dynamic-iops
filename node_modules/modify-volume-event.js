#!/usr/bin/env node

'use strict';
  var AWS = require('aws-sdk');
  AWS.config.region = 'us-west-2';
  //var region = process.env.AWS_REGION;
  //var ec2 = new AWS.EC2({region: region});
  console.log(AWS.EC2.apiVersions);
  var ec2 = new AWS.EC2();

// Create CloudWatch service object
  var cw = new AWS.CloudWatch();

 // var _ = require('lodash');


  exports.handler = (event, context, callback) => {


//    if (typeof(event.Records) === 'undefined' || typeof(event.Records[0]) === 'undefined' || typeof(event.Records[0].Sns) === 'undefined')
 //   context.fail ('ERROR: requires SNS message');
//if (typeof(event.Records[0].Sns.Message) !== 'undefined' && typeof(event.Records[0].Sns.Message.Trigger) === 'undefined')
//  event.Records[0].Sns.Message = JSON.parse(event.Records[0].Sns.Message);
function get_tagged_instances() {


        // TODO implement
        var filter = {
//      Filters: [
//        {
//          Name: 'tag:iops',
//          Values: ['dynamic']
//        }
//      ]
    };
//filter,
    ec2.describeInstances(filter, function (err, data) {
      if (err) return console.error(err.message);
      console.log("tagged: %j", data);

    return data;

    });
  }

 //   var message = JSON.parse(event.Records[0].Sns.Message);
console.log("getting tagged instances");
    var instances = get_tagged_instances();
    console.log("%j\n", instances);
    console.log("get the iops of the instance");
    console.log("%j", ec2);
    if (typeof(instances) !== 'undefined')
    var read_iops = check_read_iops(instances[0].EC2InstanceId);

    //console.log('event.Records[0].Sns.Message:');
    //console.log(event.Records[0].Sns.Message);
      // Query EBS volumes tagged "backup"
    var vol_params = {
      DryRun: false,
      //Resources: instances[0].EC2InstanceId, 
      Filters: [
      {
       Name: "attachment.instance-id", 
       Values: instances[0].EC2InstanceId
     },
        {
          Name: 'volume-type',
          Values: [
            'io1'
          ]
        }
      ]
    };
console.log("get the volumes that are attached to that instance id");
    ec2.describeVolumes(vol_params, function(err, data) {
      if (err)
        console.log(err, err.stack);
      else {
        // Create snapshot of volume
        
        var volumeid = data.Volumes[0].VolumeId;
        var val = increase_iops(volumeid);
        context.done(null, 'Function Finished!'); 
      }
    });

  };



function increase_iops(volume_id) {
    var vol_params = {
      VolumeId: volume_id, /* required */
      DryRun: false,
      Iops: 1000,
      VolumeType: 'io1'
    };

    ec2.modifyVolume(vol_params, function(err, data) {
            if (err) console.log(err, err.stack); // an error occurred
            else     console.log(data);           // successful response
    });
}

function decrease_iops(volume_id) {
    var vol_params = {
      VolumeId: volume_id, /* required */
      DryRun: false,
      Iops: 400,
      VolumeType: 'io1'
    };

    ec2.modifyVolume(vol_params, function(err, data) {
            if (err) console.log(err, err.stack); // an error occurred
            else     console.log(data);           // successful response
    });
}

function set_iops(volume_id, toiops) {
    var vol_params = {
      VolumeId: volume_id, /* required */
      DryRun: false,
      Iops: toiops,
      VolumeType: 'io1'
    };

    ec2.modifyVolume(vol_params, function(err, data) {
            if (err) console.log(err, err.stack); // an error occurred
            else     console.log(data);           // successful response
    });
}


function check_read_iops(instanceid) {
  var avg = 0;
var params = {
  EndTime: new Date.UTC(), /* required */
  MetricName: 'DiskReadOps', /* required */
  Namespace: 'AWS/EC2', /* required */
  Period: 60, /* required */
  StartTime: new Date.UTC()-60, /* required */
  Dimensions: [
    {
      Name: 'InstanceId', /* required */
      Value: instanceid /* required */
    },
    /* more items */
  ],
  Statistics: [
    'Average',
    /* more items */
  ],
  Unit: 'Count'
};
cw.getMetricStatistics(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log("%j", data);           // successful response
  avg = data.Datapoints[0].Average;
});
return avg;
}
